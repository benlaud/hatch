$default: #999;
$icon-font: '{%= js_safe_name %}';

@mixin set-font ( $icon ) {
  font-family: '#{$icon}';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin set-font-family ( $name ) {
	@font-face {
		font-family: '#{$name}';
		src:url('fonts/#{$name}.eot');
		src:url('fonts/#{$name}.eot?#iefix') format('embedded-opentype'),
		url('fonts/#{$name}.svg#aec') format('svg'),
		url('fonts/#{$name}.woff') format('woff'),
		url('fonts/#{$name}.ttf') format('truetype');
		font-weight: normal;
		font-style: normal;
	}

	@media screen and ( -webkit-min-device-pixel-ratio: 0 ) {
		@font-face {
			font-family: '#{$name}';
			src: url('fonts/#{$name}.svg##{$name}') format('svg');
		}
	}
}

@include set-font-family ( $icon-font );

[class^="icon-"], [class*=" icon-"] {
  @include set-font( $icon-font );
}

/* @function calculateRem
 *
 * Returns calculated rem given the $size passed from font-size mixin.
 * * */

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}


/* @mixin font-size
 *
 * Accepts 1 parameter
 *  Font-size in pixels
 *
 * Returns font-size in pixels and rem
 *
 * Usage: 	@include font-size(18px);
 * * */
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


/* @mixin angle-gradient
 *
 * Accepts 3 parameters
 *	Start color (equal to hex, rgb, color or sass color variable)
 *	End color (equal to hex, rgb, color or sass color variable)
 *  Angle (equal to a positive integer)
 *
 * Usage:	@include angle-gradient($from: red, $to: black, $angle: 90);
 * * */

@mixin angle-gradient ( $from: $default, $to: darken($default, 15%), $angle: 45 ) {
	background-color: $from;
    background: -webkit-linear-gradient(#{$angle}deg, $from, $to);
    background: -o-linear-gradient(#{$angle}deg, $from, $to);
    background: -moz-linear-gradient(#{$angle}deg, $from, $to);
    background: linear-gradient(#{$angle}deg, $from, $to);
    filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}


/* @mixin linear-gradient
 *
 * Accepts 2 parameters, repurposes the angle-gradient
 *  Start color
 *  End color
 *
 * Usage:	@include linear-gradient($from: red, $to: black);
 * * */

@mixin linear-gradient($from: $default, $to: darken($default, 15%)) {
	@include angle-gradient ( $from, $to, 180 );
}


/* @mixin placeholder-color
 *
 * Accepts one parameter equal to a hex value, rgb, color name or sass color variable
 * Defaults to $darkGrey color variable for Dioptics
 *
 * Usage: 	@include placeholder-color;
 *			@include placeholder-color($color: red);
 * * */

@mixin placeholder-color ( $color: $default ) {
	&::-webkit-input-placeholder {
	   color: $color;
	}

	&:-moz-placeholder { /* Firefox 18- */
	   color: $color;
	}

	&::-moz-placeholder {  /* Firefox 19+ */
	   color: $color;
	}

	&:-ms-input-placeholder {
	   color: $color;
	}
}


/* @mixin clearfix
 *
 * Standard clearfix, for parents of floated elements.
 * * */

@mixin clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}


/* @mixin opacity
 *
 * Accepts one parameter in the range of 0.0 to 1.0
 * * */

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}


/* @mixin transition
 *
 * Accepts one parameter for transition arguments
 *
 * Usage: 	@include transition( 250ms color linear )
 *			@include transition( 250ms all linear )
 * * */
@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


/* CSS Arrows */
$directions: top, right, bottom, left;

/* @mixin arrow
 *
 * Accepts 3 paremeters
 *	$dir: Can equal top right bottom or left
 *	$size: Arrow size in pixels
 *	$color: Color of the arrow
 * * */
@mixin arrow ( $dir: bottom, $size: 20px, $color: $default ) {

  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-width: $size;
  border-style: solid;

  @if $dir == top {
    border-bottom-color: $color;
  } @else if $dir == right {
    border-left-color: $color;
  } @else if $dir == bottom {
    border-top-color: $color;
  } @else if $dir == left {
    border-right-color: $color;
  }

}

@each $direction in $directions {
  .arrow-#{$direction} {
    @include arrow($dir: #{$direction});
  }
}


/* @mixin box-shadow
 *
 * Accepts 6 parameters
 *  $horizontal: 	offset of the shadow, positive means the shadow will be on the right of the box, a negative offset will put the 					shadow on the left of the box
 *  $vertical: 		offset of the shadow, a negative one means the box-shadow will be above the box, a positive one means the shadow 					will be below the box
 *  $blur: 			radius, if set to 0 the shadow will be sharp, the higher the number, the more blurred it will be
 *	$spread: 		radius (optional), positive values increase the size of the shadow, negative values decrease the size. Default is 					0 (the shadow is same size as blur)
 *	$color: 		hex or rgba with alpha
 *	$inset: 		true for inner shadow (full/all sides)
 * * */
@mixin box-shadow($horizontal, $vertical, $blur, $spread, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $horizontal $vertical $blur $spread $color;
		-moz-box-shadow:inset $horizontal $vertical $blur $spread $color;
		box-shadow:inset $horizontal $vertical $blur $spread $color;
	} @else {
		-webkit-box-shadow: $horizontal $vertical $blur $spread $color;
		-moz-box-shadow: $horizontal $vertical $blur $spread $color;
		box-shadow: $horizontal $vertical $blur $spread $color;
	}
}

/* @function calculateRem
 *
 * Returns calculated rem given the $size passed from font-size mixin.
 * * */

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function calculateRem($size) {
  $remSize: $size / $base-font-size;
  @return $remSize * 1rem;
}

@function calculateSpaceRem ($size) {
	$remSize: $size / strip-unit($base-font-size);
	@return $remSize * 1rem;
}


/* @function
 *
 * Returns unitless digit to a pixel value.
 * * */
@function calculatePixel($size) {
  @return $size * 1px;
}


/* @mixin font-size
 *
 * Accepts 1 parameter
 *  Font-size in pixels
 *
 * Returns font-size in pixels and rem
 *
 * Usage: 	@include font-size(18px);
 * * */
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


@mixin calc-space ( $type: null, $spaces: $space ) {
  $len: length($spaces);

  $i: 1;
  $pix: 0;
  $rem: 0;

  @while $i <= $len {
    $the_space: nth($spaces, $i);

    @if ( $i == 1 ) {
      $pix: calculatePixel($the_space);
      $rem: calculateSpaceRem($the_space);
    } @else if ( type-of($the_space) == string ) {
      $pix: #{$pix} #{$the_space};
      $rem: #{$rem} #{$the_space};
    } @else {
      $pix: $pix calculatePixel($the_space);
      $rem: $rem calculateSpaceRem($the_space);
    }

    $i: $i + 1;
  }

  #{$type}: $pix;
  #{$type}: $rem;
}


/* @mixin box-shadow
 *
 * Accepts 6 parameters
 *  $horizontal: 	offset of the shadow, positive means the shadow will be on the right of the box, a negative offset will put the 					shadow on the left of the box
 *  $vertical: 		offset of the shadow, a negative one means the box-shadow will be above the box, a positive one means the shadow 					will be below the box
 *  $blur: 			radius, if set to 0 the shadow will be sharp, the higher the number, the more blurred it will be
 *	$spread: 		radius (optional), positive values increase the size of the shadow, negative values decrease the size. Default is 					0 (the shadow is same size as blur)
 *	$color: 		hex or rgba with alpha
 *	$inset: 		true for inner shadow (full/all sides)
 * * */
@mixin box-shadow($horizontal, $vertical, $blur, $spread, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $horizontal $vertical $blur $spread $color;
		-moz-box-shadow:inset $horizontal $vertical $blur $spread $color;
		box-shadow:inset $horizontal $vertical $blur $spread $color;
	} @else {
		-webkit-box-shadow: $horizontal $vertical $blur $spread $color;
		-moz-box-shadow: $horizontal $vertical $blur $spread $color;
		box-shadow: $horizontal $vertical $blur $spread $color;
	}
}


/* @mixin full-support
 *
 * Returns CSS property with needed vendor-prefixes
 * * */
@mixin full-support ( $prop, $value ) {


  $vendors: null;
  $b_w: '-webkit-';
  $b_wo: '-webkit-', '-o-';
  $b_mwo: '-moz-', '-webkit-', '-o-';
  $b_wi: '-webkit-', '-ms-';

  @if $prop == 'animation' { $vendors: $b_wi; }
  @if $prop == 'box-shadow' { $vendors: $b_w; }
  @if $prop == 'transition' { $vendors: $b_wo; }
  @if $prop == 'transform' { $vendors: $b_mwo; }

  
  @each $vendor in $vendors {
    #{$vendor}#{$prop}: $value;
  }

  #{$prop} : $value;
}